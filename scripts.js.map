{"version":3,"sources":["webpack:///src/app/utils/colorUtils.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sC","file":"scripts.js","sourcesContent":["var add = function (number1, number2) {\n    return number1 + number2;\n};\nvar subtract = function (number1, number2) {\n    return number1 - number2;\n};\nfunction getComponentsAsArray(hexColor) {\n    return [hexColor.substring(1, 3), hexColor.substring(3, 5), hexColor.substring(5, 7)];\n}\nfunction getOffsettedValue(baseTenColor, offset, operationCallback) {\n    var offsettedValue = operationCallback(baseTenColor, offset);\n    if (offsettedValue < 0) {\n        offsettedValue = 0;\n    }\n    if (offsettedValue > 255) {\n        offsettedValue = 255;\n    }\n    return offsettedValue;\n}\nfunction generateColorArray(initialHexColor, size, adjustmentIndex, operation) {\n    var rgbArray = getComponentsAsArray(initialHexColor);\n    var returnRGBArray = [];\n    var redBaseTen = parseInt(rgbArray[0], 16);\n    var blueBaseTen = parseInt(rgbArray[1], 16);\n    var greenBaseTen = parseInt(rgbArray[2], 16);\n    for (var i = 0; i < size; i++) {\n        redBaseTen = getOffsettedValue(redBaseTen, adjustmentIndex, operation);\n        blueBaseTen = getOffsettedValue(blueBaseTen, adjustmentIndex, operation);\n        greenBaseTen = getOffsettedValue(greenBaseTen, adjustmentIndex, operation);\n        returnRGBArray[i] = \"#\" + getBase16Color(redBaseTen) + getBase16Color(blueBaseTen) + getBase16Color(greenBaseTen);\n    }\n    return returnRGBArray;\n}\nfunction autoGenerateColor() {\n    var red = Math.round(Math.random() * 255);\n    var blue = Math.round(Math.random() * 255);\n    var green = Math.round(Math.random() * 255);\n    return \"#\" + getBase16Color(red) + getBase16Color(blue) + getBase16Color(green);\n}\nfunction autoGenerateLightColor() {\n    var red = Math.round(Math.random() * 50);\n    var blue = Math.round(Math.random() * 50);\n    var green = Math.round(Math.random() * 50);\n    return \"#\" + getBase16Color(red) + getBase16Color(blue) + getBase16Color(green);\n}\nfunction getBase16Color(baseTenColorCode) {\n    var hexColor = baseTenColorCode.toString(16);\n    if (hexColor.length == 1) {\n        hexColor = \"0\" + hexColor;\n    }\n    return hexColor;\n}\nfunction getRandomColorPallette(initialHexColor, size, adjustmentIndex, operation) {\n    return generateColorArray(initialHexColor, size, adjustmentIndex, operation);\n}\nvar defaultColorPallet; //global default pallette generated once\nfunction getDefaultColorPalette() {\n    if (typeof (defaultColorPallet) === 'undefined') {\n        var sizeOfPallete = 10;\n        var offsetBetweenEachShade = 30;\n        var callbackToApplyOffset = this.add;\n        defaultColorPallet = getRandomColorPallette(autoGenerateLightColor(), sizeOfPallete, offsetBetweenEachShade, callbackToApplyOffset);\n    }\n    console.log(\"default color pallette \" + defaultColorPallet);\n    return defaultColorPallet;\n}\nlet colorUtils = {\n    add: this.add,\n    subtract: this.subtract,\n    getRandomColorPallette: this.getRandomColorPallette,\n    autoGenerateColor: this.autoGenerateColor,\n    autoGenerateLightColor: this.autoGenerateLightColor,\n    getDefaultColorPalette: this.getDefaultColorPalette\n};\n//# sourceMappingURL=colorUtils.js.map"],"sourceRoot":""}